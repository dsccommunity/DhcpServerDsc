trigger:
  branches:
    include:
    - main
  paths:
    include:
    - source/*
  tags:
    include:
    - "v*"
    exclude:
    - "*-*"

variables:
  buildFolderName: output
  buildArtifactName: output
  testResultFolderName: testResults
  sourceFolderName: source
  defaultBranch: main

stages:
  - stage: Build
    jobs:
      - job: Package_Module
        displayName: 'Package Module'
        pool:
          vmImage: 'windows-latest'
        steps:
          - pwsh: |
              dotnet tool install --global GitVersion.Tool --version 5.*
              $gitVersionObject = dotnet-gitversion | ConvertFrom-Json
              $gitVersionObject.PSObject.Properties.ForEach{
                  Write-Host -Object "Setting Task Variable '$($_.Name)' with value '$($_.Value)'."
                  Write-Host -Object "##vso[task.setvariable variable=$($_.Name);]$($_.Value)"
              }
              Write-Host -Object "##vso[build.updatebuildnumber]$($gitVersionObject.FullSemVer)"
            displayName: Calculate ModuleVersion (GitVersion)
          - task: PowerShell@2
            name: package
            displayName: 'Build & Package Module'
            inputs:
              filePath: './build.ps1'
              arguments: '-ResolveDependency -tasks pack'
              pwsh: true
            env:
              ModuleVersion: $(NuGetVersionV2)
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Build Artifact'
            inputs:
              targetPath: '$(buildFolderName)/'
              artifact: $(buildArtifactName)
              publishLocation: 'pipeline'
              parallel: true

  - stage: Test
    dependsOn: Build
    jobs:
      - job: Test_HQRM
        displayName: 'HQRM'
        pool:
          vmImage: 'windows-latest'
        timeoutInMinutes: '0'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: test
            displayName: 'Run HQRM Test'
            inputs:
              filePath: './build.ps1'
              arguments: '-Tasks hqrmtest'
              pwsh: false
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'HQRM'

      - job: Test_Unit_2019
        displayName: 'Unit (Windows Server 2019)'
        pool:
          vmImage: 'windows-2019'
        timeoutInMinutes: '0'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Test'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -PesterScript 'tests/Unit'"
              pwsh: true
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Unit'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Artifact'
            inputs:
              targetPath: '$(buildFolderName)/$(testResultFolderName)/'
              artifactName: 'CodeCoverage2019'

      - job: Test_Integration_2019
        displayName: 'Integration (Windows Server 2019)'
        pool:
          vmImage: 'windows-2019'
        timeoutInMinutes: '0'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: configureWinRM
            displayName: 'Configure WinRM'
            inputs:
              targetType: 'inline'
              script: 'winrm quickconfig -quiet'
              pwsh: false
          - task: PowerShell@2
            name: test
            displayName: 'Run Integration Test'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -CodeCoverageThreshold 0 -PesterScript 'tests/Integration'"
              pwsh: false
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Integration_2019'

      - job: Test_Unit_2022
        displayName: 'Unit (Windows Server 2022)'
        pool:
          vmImage: 'windows-2022'
        timeoutInMinutes: '0'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Test'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -PesterScript 'tests/Unit'"
              pwsh: true
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Unit'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Artifact'
            inputs:
              targetPath: '$(buildFolderName)/$(testResultFolderName)/'
              artifactName: 'CodeCoverage2022'

      - job: Test_Integration_2022
        displayName: 'Integration (Windows Server 2022)'
        pool:
          vmImage: 'windows-2022'
        timeoutInMinutes: '0'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: configureWinRM
            displayName: 'Configure WinRM'
            inputs:
              targetType: 'inline'
              script: 'winrm quickconfig -quiet'
              pwsh: false
          - task: PowerShell@2
            name: test
            displayName: 'Run Integration Test'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -CodeCoverageThreshold 0 -PesterScript 'tests/Integration'"
              pwsh: false
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Integration_2022'

      # - job: Test_Unit_2025
      #   displayName: 'Unit (Windows Server 2025)'
      #   pool:
      #     vmImage: 'windows-2025'
      #   timeoutInMinutes: 0
      #   steps:
      #     - task: DownloadPipelineArtifact@2
      #       displayName: 'Download Build Artifact'
      #       inputs:
      #         buildType: 'current'
      #         artifactName: $(buildArtifactName)
      #         targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
      #     - task: PowerShell@2
      #       name: test
      #       displayName: 'Run Unit Test'
      #       inputs:
      #         filePath: './build.ps1'
      #         arguments: "-Tasks test -PesterScript 'tests/Unit'"
      #         pwsh: true
      #     - task: PublishTestResults@2
      #       displayName: 'Publish Test Results'
      #       condition: succeededOrFailed()
      #       inputs:
      #         testResultsFormat: 'NUnit'
      #         testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
      #         testRunTitle: 'Unit'
      #     - task: PublishPipelineArtifact@1
      #       displayName: 'Publish Test Artifact'
      #       inputs:
      #         targetPath: '$(buildFolderName)/$(testResultFolderName)/'
      #         artifactName: 'CodeCoverage2025'
      #         parallel: true

      # - job: Test_Integration_2025
        # displayName: 'Integration (Windows Server 2025)'
        # pool:
        #   vmImage: 'windows-2025'
        # timeoutInMinutes: 0
        # steps:
        #   - task: DownloadPipelineArtifact@2
        #     displayName: 'Download Build Artifact'
        #     inputs:
        #       buildType: 'current'
        #       artifactName: $(buildArtifactName)
        #       targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
        #   - task: PowerShell@2
        #     name: configureWinRM
        #     displayName: 'Configure WinRM'
        #     inputs:
        #       targetType: 'inline'
        #       script: 'winrm quickconfig -quiet'
        #       pwsh: false
        #   - task: PowerShell@2
        #     name: test
        #     displayName: 'Run Integration Test'
        #     inputs:
        #       filePath: './build.ps1'
        #       arguments: "-Tasks test -CodeCoverageThreshold 0 -PesterScript 'tests/Integration'"
        #       pwsh: false
        #   - task: PublishTestResults@2
        #     displayName: 'Publish Test Results'
        #     condition: succeededOrFailed()
        #     inputs:
        #       testResultsFormat: 'NUnit'
        #       testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
        #       testRunTitle: 'Integration_2025'

      - job: Code_Coverage
        displayName: 'Publish Code Coverage'
        dependsOn:
          - Test_Unit_2019
          - Test_Unit_2022
          # - Test_Unit_2025
        pool:
          vmImage: 'ubuntu-latest'
        timeoutInMinutes: '0'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Test Artifact 2019'
            inputs:
              buildType: 'current'
              artifactName: 'CodeCoverage2019'
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCoverage2019'
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Test Artifact 2022'
            inputs:
              buildType: 'current'
              artifactName: 'CodeCoverage2022'
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCoverage2022'
          # - task: DownloadPipelineArtifact@2
          #   displayName: 'Download Test Artifact 2025'
          #   inputs:
          #     buildType: 'current'
          #     artifactName: 'CodeCoverage2025'
          #     targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCoverage2025'
          - task: PowerShell@2
            name: merge
            displayName: 'Merge Code Coverage files'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks merge'
              pwsh: true
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage to Azure DevOps'
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: '$(buildFolderName)/$(testResultFolderName)/JaCoCo_coverage.xml'
              pathToSources: '$(Build.SourcesDirectory)/$(sourceFolderName)/'
          - script: |
              bash <(curl -s https://codecov.io/bash) -f "./$(buildFolderName)/$(testResultFolderName)/JaCoCo_coverage.xml"
            displayName: 'Publish Code Coverage to Codecov.io'

  - stage: Deploy
    dependsOn: Test
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        ),
        contains(variables['System.TeamFoundationCollectionUri'], 'dsccommunity')
      )
    jobs:
      - job: Deploy_Module
        displayName: 'Deploy Module'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'
          - task: PowerShell@2
            name: publishRelease
            displayName: 'Publish Release'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks publish'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              GalleryApiToken: $(GalleryApiToken)
              ReleaseBranch: $(defaultBranch)
              MainGitBranch: $(defaultBranch)
          - task: PowerShell@2
            name: sendChangelogPR
            displayName: 'Send Changelog PR'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks Create_ChangeLog_GitHub_PR'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              ReleaseBranch: $(defaultBranch)
              MainGitBranch: $(defaultBranch)
